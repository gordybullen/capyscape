{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/bush.js","webpack:///./src/corndog.js","webpack:///./src/farmer.js","webpack:///./src/forest.js","webpack:///./src/game.js","webpack:///./src/game_view.js","webpack:///./src/index.js","webpack:///./src/jason.js","webpack:///./src/levels.js","webpack:///./src/moving_object.js","webpack:///./src/util.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACvBA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACjB;AACE;AACF;AACM;;AAEhC,qBAAqB,sDAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6CAAI;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,6CAAI;AACZ,iBAAiB,6CAAI;AACrB,QAAQ,6CAAI;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,6CAAI;AACZ,iBAAiB,6CAAI;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK,iCAAiC,6CAAI;AAC1C;AACA,KAAK,iCAAiC,8CAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,6CAAI;AACrC;AACA,KAAK,mCAAmC,gDAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,EAAC;;;;;;;;;;;;;ACzItB;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACE;AACE;AACA;AACJ;AACM;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8CAAK,EAAE,wCAAwC;AACpE;AACA;AACA;AACA,sBAAsB,+CAAM;AAC5B;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B,+CAAM;AAChC;AACA,KAAK,4BAA4B,6CAAI;AACrC;AACA,KAAK,4BAA4B,gDAAO;AACxC;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC,mBAAmB,+CAAM,EAAE,8BAA8B;AACzD;AACA;;AAEA;AACA,mBAAmB,qBAAqB;AACxC,mBAAmB,6CAAI,EAAE,qCAAqC;AAC9D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,gDAAO,EAAE,kBAAkB;AAC9C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY,6CAAI,2BAA2B,6CAAI;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,6BAA6B;AAChD,qBAAqB,6BAA6B;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,8BAA8B;AACjD,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,+CAAM;AAChC;AACA,KAAK,4BAA4B,gDAAO;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,mEAAI,EAAC;;;;;;;;;;;;;ACnNpB;AAAA;AAAA;AAA0B;AACI;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB,6CAAI,WAAW,+CAAM;AACzC;;AAEA;AACA;;AAEA;AACA;;AAEA,qCAAqC,gBAAgB;AACrD,2CAA2C,uBAAuB;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mCAAmC,+CAAM;AACzC,kCAAkC,+CAAM;AACxC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;AACA;;AAEe,uEAAQ,EAAC;;;;;;;;;;;;;ACnGxB;AAAA;AAAA;AAAmC;AACQ;;AAE3C;AACA;AACA;AACA;AACA;AACA,wBAAwB,sDAAY;AACpC;AACA;AACA,uBAAuB,kDAAQ;AAC/B;AACA,CAAC;;;AAGD;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA,wD;;;;;;;;;;;;ACzCA;AAAA;AAA2C;;AAE3C,oBAAoB,sDAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,oEAAK,EAAC;;;;;;;;;;;;;AClJrB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEe,qEAAM,EAAC;;;;;;;;;;;;;AC/BtB;AAAA;AAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEe,2EAAY,EAAC;;;;;;;;;;;;;ACpE5B;AAAA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEe,mEAAI,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","export default class Bush {\n  constructor(options) {\n    this.sx = 0;\n    this.sy = 0;\n    this.sw = 32;\n    this.sh = 112;\n    this.scale = 1.5;\n    this.width = this.sw * this.scale;\n    this.height = this.sh * this.scale;\n    this.image = new Image;\n    this.image.src = './bush.png';\n    this.game = options.game;\n    this.pos = options.pos;\n  }\n\n  draw(ctx) {\n    ctx.drawImage(this.image, this.sx, this.sy, this.sw, this.sh, this.pos[0], this.pos[1], this.width, this.height);\n    // ctx.beginPath();\n    // ctx.arc(this.pos[0], this.pos[1], 20, 0, 2 * Math.PI);\n    // ctx.fillStyle = \"rgb(224, 197, 121)\";\n    // ctx.fill();\n    // ctx.closePath();\n  }\n}","export default class Corndog {\n  constructor(options) {\n    this.sx = 0;\n    this.sy = 0;\n    this.sw = 460;\n    this.sh = 750;\n    this.scale = 0.1;\n    this.width = this.sw * this.scale;\n    this.height = this.sh * this.scale;\n    this.image = new Image();\n    this.image.src = \"./corndog.png\";\n    this.game = options.game;\n    this.pos = options.pos;\n  }\n\n  draw(ctx) {\n    ctx.drawImage(\n      this.image,\n      this.sx,\n      this.sy,\n      this.sw,\n      this.sh,\n      this.pos[0],\n      this.pos[1],\n      this.width,\n      this.height\n    );\n  }\n}\n","import MovingObject from \"./moving_object\";\nimport Util from \"./util\";\nimport Jason from \"./jason\";\nimport Bush from \"./bush\";\nimport Corndog from \"./corndog\";\n\nclass Farmer extends MovingObject {\n  constructor(options) {\n    super(options);\n    this.dx = 3;\n    this.dy = -3;\n    this.sx = 0;\n    this.sy = 0;\n    this.sw = 27;\n    this.sh = 33;\n    this.scale = 3;\n    this.width = this.sw * this.scale;\n    this.height = this.sh * this.scale;\n    this.image = new Image();\n    this.image.src = \"./farmer_walk_left.png\";\n    this.speed = 2 * this.game.speedMultiplier;\n    this.vel = Util.randomVec(this.speed);\n    this.frames = 0;\n    this.radius = 20;\n  }\n\n  move(timeDelta = timeDelta || 1) {\n    // timeDelta is number of milliseconds since last move\n    // if the computer is busy the time delta will be larger\n    // in this case the MovingObject should move farther in this frame\n    // velocity of object is how far it should move in 1/60th of a second\n    const velocityScale = timeDelta / this.NORMAL_FRAME_TIME_DELTA;\n    const offsetX = this.vel[0] * velocityScale;\n    const offsetY = this.vel[1] * velocityScale;\n\n    this.pos = [this.pos[0] + offsetX, this.pos[1] + offsetY];\n\n    if (Math.sign(this.vel[0]) === -1) {\n      this.image.src = \"./farmer_walk_left.png\";\n    } else {\n      this.image.src = \"./farmer_walk_right.png\";\n    }\n\n    if (this.game.isAtBorder(this)) {\n      if (this.isWrappable) {\n        this.pos = this.game.wrap(this.pos);\n      } else if (\n        this.pos[0] + this.width > this.game.DIM_X ||\n        this.pos[0] < 0\n      ) {\n        this.vel[0] = -this.vel[0];\n      } else if (\n        this.pos[1] < 0 ||\n        this.pos[1] + this.height > this.game.DIM_Y\n      ) {\n        this.vel[1] = -this.vel[1];\n      }\n\n      if (this.game.isOutOfBounds(this)) {\n        this.pos = [500, 250];\n      }\n    }\n\n    // if Jason is in range of farmer, farmer will lock on to Jason\n    if (Util.dist(this.pos, this.game.jason.pos) < 250) {\n      this.vel = Util.scale(\n        Util.dir([\n          -(this.pos[0] - this.game.jason.pos[0]),\n          -(this.pos[1] - this.game.jason.pos[1]),\n        ]),\n        this.speed + 0.75\n      );\n    }\n\n    if (Util.dist(this.pos, this.game.jason.pos) > 250 && !this.change) {\n      this.vel = Util.randomVec(this.speed);\n      this.change = true;\n    }\n  }\n\n  collideWith(otherObject) {\n    if (otherObject instanceof Farmer && this.frames % 100 === 0) {\n      this.vel[0] = -this.vel[0];\n    } else if (otherObject instanceof Bush && this.frames % 100 === 0) {\n      this.vel[0] = -this.vel[0];\n    } else if (otherObject instanceof Jason) {\n      this.game.lives -= 1;\n      this.game.reset = true;\n      if (this.game.lives === 0) {\n        this.game.gameOver = true;\n      }\n    }\n  }\n\n  collideWithStationaryObject(stationaryObj) {\n    if (stationaryObj instanceof Bush) {\n      this.vel[0] = -this.vel[0];\n    } else if (stationaryObj instanceof Corndog) {\n      this.width *= 1.1;\n      this.height *= 1.1;\n      this.speed *= 0.5;\n      this.game.remove(stationaryObj);\n    }\n    // if (this.pos[0] < stationaryObj.pos[0] + stationaryObj.width && this.pos[0] + this.width > stationaryObj.pos[0] &&\n    //   this.pos[1] < stationaryObj.pos[1] + stationaryObj.height && this.pos[1] + this.height > stationaryObj.pos[1]) {\n    //       this.vel[0] = -this.vel[0];\n    // }\n  }\n\n  draw(ctx) {\n    this.frames += 1;\n\n    // moves from the farmer walk sprite sheet over time\n    if (this.frames % 10 === 0) {\n      this.sx += 27;\n    }\n\n    // loop back to beginning of the sheet once we get to the last frame\n    if (this.sx > 189) {\n      this.sx = 0;\n      this.frames = 0;\n    }\n\n    ctx.drawImage(\n      this.image,\n      this.sx,\n      this.sy,\n      this.sw,\n      this.sh,\n      this.pos[0],\n      this.pos[1],\n      this.width,\n      this.height\n    );\n  }\n}\n\nexport default Farmer;\n","export default class Forest {\n  constructor(options) {\n    this.sx = 0;\n    this.sy = 0;\n    this.sw = 368;\n    this.sh = 640;\n    this.scale = 0.4;\n    this.width = this.sw * this.scale;\n    this.height = this.sh * this.scale;\n    this.image = new Image();\n    this.image.src = \"./forest_side.png\";\n    this.game = options.game;\n    this.pos = options.pos;\n  }\n\n  draw(ctx) {\n    ctx.drawImage(\n      this.image,\n      this.sx,\n      this.sy,\n      this.sw,\n      this.sh,\n      this.pos[0],\n      this.pos[1],\n      this.width,\n      this.height\n    );\n    // ctx.beginPath();\n    // ctx.arc(this.pos[0], this.pos[1], 20, 0, 2 * Math.PI);\n    // ctx.fillStyle = \"rgb(224, 197, 121)\";\n    // ctx.fill();\n    // ctx.closePath();\n  }\n}\n","import Util from \"./util\";\nimport Jason from \"./jason\";\nimport Farmer from \"./farmer\";\nimport Forest from \"./forest\";\nimport Bush from \"./bush\";\nimport Corndog from \"./corndog\";\n\nconst BUSH_POSITIONS = [\n  [200, 0 + 75],\n  [200, 600 / 2 + 50],\n  [200, 300 - 168 / 2],\n  [800, 0 + 75],\n  [800, 600 / 2 + 50],\n];\n\nclass Game {\n  constructor(ctx, levelData) {\n    this.DIM_X = 1200;\n    this.DIM_Y = 600;\n    this.BG_COLOR = \"green\";\n    this.BG_IMAGE = new Image();\n    this.BG_IMAGE.src = \"crops_overhead.jpeg\";\n    this.NUM_FARMERS = levelData.numFarmers;\n    this.NUM_BUSHES = levelData.numBushes;\n    this.NUM_CORNDOGS = 10 + levelData.corndogsAdded;\n    this.speedMultiplier = levelData.farmerSpeedMultiplier;\n    this.jason = new Jason({ pos: [this.DIM_X - 84, 0], game: this });\n    this.farmers = [];\n    this.bushes = [];\n    this.corndogs = [];\n    this.forest = new Forest({\n      pos: [0, this.DIM_Y / 2 - 256 / 2],\n      game: this,\n    });\n    this.lives = 3;\n    this.reset = false;\n    this.gameOver = false;\n\n    this.addFarmers();\n    this.addBushes();\n  }\n\n  add(object) {\n    if (object instanceof Farmer) {\n      this.farmers.push(object);\n    } else if (object instanceof Bush) {\n      this.bushes.push(object);\n    } else if (object instanceof Corndog) {\n      this.corndogs.push(object);\n    } else {\n      throw new Error(\"unknown type of object\");\n    }\n  }\n\n  allObjects() {\n    return [].concat(\n      this.jason,\n      this.farmers,\n      this.bushes,\n      this.forest,\n      this.corndogs\n    );\n  }\n\n  allMovingObjects() {\n    return [].concat(this.farmers, this.jason);\n  }\n\n  automatedObjects() {\n    return [].concat(this.farmers);\n  }\n\n  stationaryObjects() {\n    return [].concat(this.bushes, this.corndogs);\n  }\n\n  addFarmers() {\n    for (let i = 0; i < this.NUM_FARMERS; i++) {\n      this.add(new Farmer({ pos: [500, 250], game: this }));\n    }\n  }\n\n  addBushes() {\n    for (let i = 0; i < this.NUM_BUSHES; i++) {\n      this.add(new Bush({ pos: BUSH_POSITIONS[i], game: this }));\n    }\n  }\n\n  addCorndog() {\n    if (this.NUM_CORNDOGS > 0) {\n      this.NUM_CORNDOGS -= 1;\n\n      let pos = Array.from(this.jason.pos);\n      switch (this.jason.direction()) {\n        case \"left\":\n          pos = [pos[0] - this.jason.width / 2, pos[1]];\n          break;\n        case \"right\":\n          pos = [pos[0] + this.jason.width, pos[1]];\n          break;\n        case \"up\":\n          pos = [pos[0], (pos[1] -= 50)];\n          break;\n        case \"down\":\n          pos = [pos[0], (pos[1] += 50)];\n          break;\n      }\n\n      this.add(new Corndog({ pos, game: this }));\n    }\n  }\n\n  randomPosition() {\n    return [this.DIM_X * Math.random(), this.DIM_Y * Math.random()];\n  }\n\n  draw(ctx) {\n    ctx.clearRect(0, 0, this.DIM_X, this.DIM_Y);\n    // ctx.fillStyle = this.BG_COLOR;\n    ctx.drawImage(this.BG_IMAGE, 0, 0, this.DIM_X, this.DIM_Y);\n    // ctx.fillRect(0, 0, this.DIM_X, this.DIM_Y);\n\n    this.allObjects().forEach((object) => object.draw(ctx));\n  }\n\n  moveObjects(timeDelta) {\n    this.automatedObjects().forEach((object) => object.move(timeDelta));\n  }\n\n  wrap(pos) {\n    return [Util.wrap(pos[0], this.DIM_X), Util.wrap(pos[1], this.DIM_Y)];\n  }\n\n  isAtBorder(object) {\n    return (\n      object.pos[0] < 0 + object.width ||\n      object.pos[1] < 0 + object.height ||\n      object.pos[0] > this.DIM_X - object.width ||\n      object.pos[1] > this.DIM_Y - object.height\n    );\n  }\n\n  isOutOfBounds(object) {\n    return (\n      object.pos[0] < 0 - 10 ||\n      object.pos[1] < 0 - 10 ||\n      object.pos[0] > this.DIM_X + 10 ||\n      object.pos[1] > this.DIM_Y + 10\n    );\n  }\n\n  checkMovingObjectCollisions() {\n    const allMovingObjects = this.allMovingObjects();\n\n    for (let i = 0; i < allMovingObjects.length; i++) {\n      for (let j = 0; j < allMovingObjects.length; j++) {\n        const obj1 = allMovingObjects[i];\n        const obj2 = allMovingObjects[j];\n\n        if (obj1.isCollidedWith(obj2) && obj1 !== obj2) {\n          const collision = obj1.collideWith(obj2);\n          if (collision) return;\n        }\n      }\n    }\n  }\n\n  checkJasonStationaryObjectCollisions() {\n    for (let i = 0; i < this.bushes.length; i++) {\n      const stationaryObj = this.bushes[i];\n      const collided = this.jason.isCollidedWith(stationaryObj);\n      if (collided) this.jason.collideWithStationaryObject(stationaryObj);\n    }\n  }\n\n  checkFarmerStationaryObjectCollisions() {\n    const stationaryObjects = this.stationaryObjects();\n    for (let i = 0; i < stationaryObjects.length; i++) {\n      for (let j = 0; j < this.farmers.length; j++) {\n        const stationaryObj = stationaryObjects[i];\n        const collided = this.farmers[j].isCollidedWith(stationaryObj);\n        if (collided)\n          this.farmers[j].collideWithStationaryObject(stationaryObj);\n      }\n    }\n  }\n\n  remove(object) {\n    if (object instanceof Farmer) {\n      this.farmers.splice(this.farmers.indexOf(object), 1);\n    } else if (object instanceof Corndog) {\n      this.corndogs.splice(this.bushes.indexOf(object), 1);\n    }\n  }\n\n  passedRound() {\n    return (\n      this.jason.pos[0] === 0 &&\n      this.jason.pos[1] > this.forest.pos[1] &&\n      this.jason.pos[1] < this.forest.pos[1] + this.forest.height\n    );\n  }\n\n  step(timeDelta) {\n    this.moveObjects(timeDelta);\n    this.checkJasonStationaryObjectCollisions();\n    this.checkFarmerStationaryObjectCollisions();\n    this.checkMovingObjectCollisions();\n  }\n}\n\nexport default Game;\n","import Game from \"./game\";\nimport levels from \"./levels\";\n\nclass GameView {\n  constructor(ctx) {\n    this.ctx = ctx;\n    this.lastTime = 0;\n    this.gameMenu = document.getElementById(\"start-menu\");\n    this.startButton = document.querySelector(\".start-button\");\n    this.menuTitle = document.querySelector(\".menu-title\");\n    this.menuText = document.querySelector(\".menu-text\");\n    this.inProgress = false;\n    this.gameInfo = document.querySelector(\".game-info\");\n    this.corndogs = document.querySelector(\".corndogs\");\n    this.lives = document.querySelector(\".lives\");\n    this.round = 1;\n\n    this.bindMenuHandlers();\n  }\n\n  start() {\n    this.game = new Game(this.ctx, levels[this.round]);\n    this.inProgress = true;\n\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  animate(time) {\n    const timeDelta = time - this.lastTime;\n\n    this.lives.innerHTML = `Lives: ${this.game.lives}`;\n    this.corndogs.innerHTML = `Corndogs: ${this.game.NUM_CORNDOGS}`;\n    this.game.step(timeDelta);\n    this.game.draw(this.ctx);\n    this.lastTime = time;\n\n    if (this.roundOver()) {\n      this.gameMenu.classList.toggle(\"hide\");\n      this.gameInfo.classList.toggle(\"hide\");\n      this.inProgress = false;\n    } else if (this.game.reset) {\n      this.game.jason.pos = [this.game.DIM_X - 84, 0];\n      this.game.reset = false;\n      requestAnimationFrame(this.animate.bind(this));\n    } else {\n      // every call to animate requests causes another call to animate\n      requestAnimationFrame(this.animate.bind(this));\n    }\n  }\n\n  roundOver() {\n    if (this.game.gameOver) {\n      cancelAnimationFrame(this.animate.bind(this));\n      this.menuTitle.innerHTML = \"Try again? Jason needs you!\";\n      this.menuText.innerHTML = \"Hints: Press the spacebar to place a corndog!\";\n      this.startButton.innerHTML = \"Play Again\";\n      this.round = 1;\n      return true;\n    } else if (this.game.passedRound()) {\n      this.round += 1;\n      if (this.round !== 4) {\n        cancelAnimationFrame(this.animate.bind(this));\n        this.menuTitle.innerHTML = levels[this.round].menuTitle;\n        this.menuText.innerHTML = levels[this.round].menuText;\n        this.startButton.innerHTML = \"Keep going\";\n        return true;\n      } else {\n        this.round = 1;\n        cancelAnimationFrame(this.animate.bind(this));\n        this.menuTitle.innerHTML = \"YOU MADE IT!!!\";\n        this.menuText.innerHTML = \"Jason is reunited with his family.\";\n        this.startButton.innerHTML = \"Play Again\";\n        return true;\n      }\n    }\n    return false;\n  }\n\n  bindMenuHandlers() {\n    const startGame = () => {\n      this.gameMenu.classList.toggle(\"hide\");\n      this.gameInfo.classList.toggle(\"hide\");\n      this.start();\n    };\n\n    this.startButton.addEventListener(\"click\", () => {\n      if (!this.inProgress) startGame();\n    });\n\n    window.addEventListener(\"keydown\", (e) => {\n      if (e.keyCode === 13 && !this.inProgress) startGame();\n    });\n\n    window.addEventListener(\"keydown\", (e) => {\n      if (e.keyCode === 32 && this.inProgress) this.game.addCorndog();\n    });\n  }\n}\n\nexport default GameView;\n","import GameView from './game_view';\nimport MovingObject from './moving_object';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const canvas = document.getElementById('canvas');\n  const ctx = canvas.getContext('2d');\n  canvas.width = 1200;\n  canvas.height = 600;\n  window.MovingObject = MovingObject;\n  window.ctx = ctx;\n  window.frames = 0;\n  const gameView = new GameView(ctx);\n  // gameView.start();\n});\n\n\nconst keyDownHandler = e => {\n  if (e.key === 'Right' || e.key === 'ArrowRight') {\n    window.rightPressed = true;\n  } else if (e.key === 'Left' || e.key === 'ArrowLeft') {\n    window.leftPressed = true;\n  } else if (e.key === 'Up' || e.key === 'ArrowUp') {\n    window.upPressed = true;\n  } else if (e.key === 'Down' || e.key === 'ArrowDown') {\n    window.downPressed = true;\n  }\n}\n\nconst keyUpHandler = e => {\n  if (e.key === 'Right' || e.key === 'ArrowRight') {\n    window.rightPressed = false;\n  } else if (e.key === 'Left' || e.key === 'ArrowLeft') {\n    window.leftPressed = false;\n  } else if (e.key === 'Up' || e.key === 'ArrowUp') {\n    window.upPressed = false;\n  } else if (e.key === 'Down' || e.key === 'ArrowDown') {\n    window.downPressed = false;\n  }\n}\n\ndocument.addEventListener('keydown', keyDownHandler, false);\ndocument.addEventListener('keyup', keyUpHandler, false);","import MovingObject from \"./moving_object\";\n\nclass Jason extends MovingObject {\n  constructor(options) {\n    super(options);\n    this.dx = 2.5;\n    this.dy = -2.5;\n    this.sx = 0;\n    this.sy = 0;\n    this.sw = 28;\n    this.sh = 21;\n    this.scale = 3;\n    this.width = this.sw * this.scale;\n    this.height = this.sh * this.scale;\n    this.image = new Image();\n    this.image.src = \"./capy_walk_left.png\";\n  }\n\n  direction() {\n    if (this.image.src.includes(\"right\")) {\n      return \"right\";\n    } else if (this.image.src.includes(\"left\")) {\n      return \"left\";\n    } else if (this.image.src.includes(\"up\")) {\n      return \"up\";\n    } else if (this.image.src.includes(\"down\")) {\n      return \"down\";\n    }\n  }\n\n  collideWithStationaryObject(stationaryObj) {\n    // if (this.pos[0] < stationaryObj.pos[0] + stationaryObj.width && this.pos[0] + this.width > stationaryObj.pos[0] &&\n    //   this.pos[1] < stationaryObj.pos[1] + stationaryObj.height && this.pos[1] + this.height > stationaryObj.pos[1]) {\n    //     if (this.pos[0] > stationaryObj.pos[0] + stationaryObj.width / 2) {\n    //       this.pos[0] += this.dx;\n    //     }\n    //     if (this.pos[0] < stationaryObj.pos[0] + stationaryObj.width / 2) {\n    //       this.pos[0] -= this.dx;\n    //     }\n    // }\n    if (this.isCollidedWith(stationaryObj)) {\n      const obj1CenterPos = [\n        this.pos[0] + this.width / 2,\n        this.pos[1] + this.height / 2,\n      ];\n      const obj2CenterPos = [\n        stationaryObj.pos[0] + stationaryObj.width / 2,\n        stationaryObj.pos[1] + stationaryObj.height / 2,\n      ];\n\n      if (obj1CenterPos[0] > obj2CenterPos[0]) {\n        this.pos[0] += this.dx;\n      } else if (obj1CenterPos[0] < obj2CenterPos[0]) {\n        this.pos[0] -= this.dx;\n      }\n    }\n  }\n\n  draw(ctx) {\n    if (window.rightPressed) {\n      this.image.src = \"./capy_walk_right_flipped.png\";\n    } else if (window.leftPressed) {\n      this.image.src = \"./capy_walk_left.png\";\n    } else if (window.downPressed) {\n      this.image.src = \"./capy_walk_down.png\";\n    } else if (window.upPressed) {\n      this.image.src = \"./capy_walk_up.png\";\n    }\n\n    if (window.rightPressed) {\n      this.pos[0] += this.dx;\n      if (this.pos[0] + this.dx + this.width > this.game.DIM_X) {\n        this.pos[0] = this.game.DIM_X - this.width;\n      }\n    } else if (window.leftPressed) {\n      this.pos[0] -= this.dx;\n      if (this.pos[0] < 0) {\n        this.pos[0] = 0;\n      }\n    }\n\n    if (window.upPressed) {\n      this.pos[1] += this.dy;\n      if (this.pos[1] + this.dy < 0) {\n        this.pos[1] = 0;\n      }\n    } else if (window.downPressed) {\n      this.pos[1] -= this.dy;\n      if (this.pos[1] - this.dy + this.height > this.game.DIM_Y) {\n        this.pos[1] = this.game.DIM_Y - this.height;\n      }\n    }\n\n    if (window.upPressed && !window.rightPressed) {\n      window.frames += 1;\n    } else if (window.downPressed && !window.leftPressed) {\n      window.frames += 1;\n    } else if (window.upPressed && window.rightPressed) {\n      window.frames += 1;\n    } else if (window.downPressed && window.leftPressed) {\n      window.frames += 1;\n    } else if (!window.upPressed && window.rightPressed) {\n      window.frames += 1;\n    } else if (!window.downPressed && window.leftPressed) {\n      window.frames += 1;\n    }\n\n    switch (window.frames) {\n      case 0:\n        this.sx = 0;\n        break;\n      case 8:\n        this.sx = 28;\n        break;\n      case 16:\n        this.sx = 56;\n        break;\n      case 24:\n        this.sx = 84;\n        break;\n      case 32:\n        this.sx = 112;\n        break;\n      default:\n        break;\n    }\n\n    if (window.frames > 32) {\n      this.sx = 0;\n      window.frames = 0;\n    }\n\n    ctx.drawImage(\n      this.image,\n      this.sx,\n      this.sy,\n      this.sw,\n      this.sh,\n      this.pos[0],\n      this.pos[1],\n      this.width,\n      this.height\n    );\n  }\n}\n\nexport default Jason;\n","const levels = {\n  1: {\n    numFarmers: 1,\n    farmerSpeedMultiplier: 1,\n    numBushes: 0,\n    corndogsAdded: -5,\n    menuTitle:\n      \"\",\n    menuText:\n      \"\"\n  },\n  2: {\n    numFarmers: 2,\n    farmerSpeedMultiplier: 1.5,\n    numBushes: 2,\n    corndogsAdded: -3,\n    menuTitle: \"You made it out of this pasture, but the farmers are still looking for you!\",\n    menuText:\n      \"Hint: Farmers love corndogs. Make sure to place strategic corndogs to slow a farmer in his tracks.\",\n  },\n  3: {\n    numFarmers: 3,\n    farmerSpeedMultiplier: 1.75,\n    numBushes: 5,\n    corndogsAdded: -1,\n    menuTitle: \"Watch out, Farmer Ats' is gathering his friends!\",\n    menuText:\n      \"Hint: Try not get stuck in a corner! Give yourself some escape routes.\",\n  },\n};\n\nexport default levels;\n","import Util from \"./util\";\n\nclass MovingObject {\n  constructor(options) {\n    this.pos = options.pos;\n    this.radius = options.radius;\n    this.color = options.color;\n    this.game = options.game;\n    this.isWrappable = false;\n    this.NORMAL_FRAME_TIME_DELTA = 1000 / 60;\n  }\n\n  // draw(ctx) {\n  //   ctx.beginPath();\n  //   ctx.arc(this.pos[0], this.pos[1], this.radius, 0, Math.PI * 2);\n  //   ctx.fillStyle = this.color;\n  //   ctx.fill();\n  //   ctx.closePath();\n  // }\n\n  // move(timeDelta = timeDelta || 1) {\n  //   // timeDelta is number of milliseconds since last move\n  //   // if the computer is busy the time delta will be larger\n  //   // in this case the MovingObject should move farther in this frame\n  //   // velocity of object is how far it should move in 1/60th of a second\n  //   const velocityScale = timeDelta / this.NORMAL_FRAME_TIME_DELTA;\n  //   const offsetX = this.vel[0] * velocityScale;\n  //   const offsetY = this.vel[1] * velocityScale;\n\n  //   this.pos = [this.pos[0] + offsetX, this.pos[1] + offsetY];\n\n  //   if (this.game.isOutOfBounds(this)) {\n  //     if (this.isWrappable) {\n  //       this.pos = this.game.wrap(this.pos);\n  //     } else if (this.pos[0] > this.game.DIM_X || this.pos[0] < 0) {\n  //       this.vel[0] = -this.vel[0];\n  //     } else if (this.pos[1] < 0 || this.pos[1] > this.game.DIM_Y) {\n  //       this.vel[1] = -this.vel[1];\n  //     }\n  //   }\n\n  //   if (Util.dist(this.pos, this.game.jason.pos) < 400) {\n  //     this.vel = Util.scale(Util.dir([-(this.pos[0] - this.game.jason.pos[0]), -(this.pos[1] - this.game.jason.pos[1])]), this.speed + this.speed / 2);\n  //   }\n  // }\n\n  isCollidedWith(otherObject) {\n    const obj1CenterPos = [\n      this.pos[0] + this.width / 2,\n      this.pos[1] + this.height / 2,\n    ];\n    const obj2CenterPos = [\n      otherObject.pos[0] + otherObject.width / 2,\n      otherObject.pos[1] + otherObject.height / 2,\n    ];\n    const centerDist = Util.dist(obj1CenterPos, obj2CenterPos);\n    // console.log(centerDist < (this.width + otherObject.width));\n    // console.log(\"centerDist\", centerDist);\n    // console.log(\"this.width:\", this.width);\n    // console.log(\"otherObject.width:\", otherObject.width);\n    // console.log(\"this.pos:\", this.pos);\n    // console.log(\"otherObject.pos:\", otherObject.pos);\n    return centerDist < (this.width / 2) + (otherObject.width / 2);\n  }\n\n  collideWith(otherObject) {}\n}\n\nexport default MovingObject;\n","const Util = {\n  // Return a randomly oriented vector with the given length\n  randomVec(length) {\n    const deg = 2 * Math.PI * Math.random();\n    return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  },\n  // Scale the length of a vector by the given amount\n  scale(vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  },\n  dist(pos1, pos2) {\n    return Math.sqrt(\n      Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n    );\n  },\n  // Find the length of the vector\n  norm(vec) {\n    return Util.dist([0, 0], vec);\n  },\n  dir(vec) {\n    const norm = Util.norm(vec);\n    return Util.scale(vec, 1 / norm);\n  },\n  wrap(coord, max) {\n    if (coord < 0) {\n      return max - (coord % max);\n    } else if (coord > max) {\n      return coord % max;\n    } else {\n      return coord;\n    }\n  }\n};\n\nexport default Util;"],"sourceRoot":""}